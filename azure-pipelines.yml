# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# Build name
name: '$(Year:yyyy).$(Month).$(DayOfMonth).$(Rev:r)'

# the build will trigger on any changes to the master branch
trigger:
- master

# the build will run on a Microsoft hosted agent, using the lastest Windows VM Image
pool:
  vmImage: 'windows-latest'

# these variables are available throughout the build file
# just the build configuration is defined, in this case we are building Release packages
variables:
  buildConfiguration: 'Release'
  csproj: 'Geometry.csproj'

jobs:
- job: Build
  # Print env
  steps:
  - task: CmdLine@2
    inputs:
      script: |
        echo $(Build.SourceVersion)
        set  FullHash=$(Build.SourceVersion)
        set Hash=%FullHash:~0,7%
        echo %Hash%
        echo "##vso[task.setvariable variable=Hash]%Hash%"
        
        echo $(Build.BuildNumber)
        set  BuildNumber=$(Build.BuildNumber)
        echo %BuildNumber%-%Hash%
        set  VersionNumber=%BuildNumber%-%Hash%
        echo "##vso[task.setvariable variable=VersionNumber]%VersionNumber%"
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
  # Build
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'
      arguments: '--configuration $(buildConfiguration)'
      projects: '$(csproj)'
  # Pack NuGet
  - task: DotNetCoreCLI@2
    displayName: "dotnet pack"
    inputs:
      command: 'pack'
      packagesToPack: '$(csproj)'
      nobuild: true
      versioningScheme: 'byBuildNumber'
  # Publish NuGet Artifact
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'nupkg'
      publishLocation: 'pipeline'

- job: Deploy
  dependsOn: Build
  steps:
  # Download NuGet Artifact
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'nupkg'
      itemPattern: |
        *.nupkg
        !*.symbols.nupkg
      targetPath: '$(Pipeline.Workspace)'
  # Deploy to Feed
  - task: NuGetCommand@2
    displayName: 'nuget push'
    inputs:
      command: 'push'
      packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: '432b0650-65c4-4dc4-8be1-26825520dbf4/351f9c1a-98cf-4c06-8c95-39a43962f5e2'
      allowPackageConflicts: true
